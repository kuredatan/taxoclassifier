*** Use main.py to interact gently with the program. ***

In Emacs:
- open main.py
- C-c C-p to open interpreter
- in the code, C-c C-l to evaluate the file
- write down "main.py"
- in the interpreter, write down "main()"

In the terminal:
- write down "python"
- write down "from main import main"
- write down "main()"
- to exit Python, write down "exit()"

-----------------------------------------------------------------------------------------------------------------

Details about main.py:
- "TotalRatio and DiffRatio": 
-- "Total Ratio" : 
* Provided two groups 1 and 2 of samples, if n is the number of assignments to common nodes in both groups (i.e. the sum of assignments in common nodes in each group), and n1 et n2 respectively the number of assignments in these two groups in non-common nodes, then Total ratio Distance is (n1 + n2 + n) - n = n1 + n2. 
--- INTERPRETATION: The more small totalRatio "Distance" is, the more alike are the samples in terms of node population. 
* It is also given in a normalized form: n/(n1 + n2 + n). [Returns +inf if n1 = n2 = n3 = ... = 0]. 
--- INTERPRETATION: The more totalRatio is close to 1, the more alike are the samples in terms of node population. 
-- "DiffRatio" : it is the symmetric of Total Ratio, that is: Diff ratio + Total ratio = 1.

- "PatternRatio": 
* Enumerates the common and specific patterns (of any length) of the two trees induced by the samples given in argument, and computes the number of nodes and assignments in each of them. It finally returns a list of (pattern,number of assignments,number of nodes) tuples for common and specific patterns. 
* PatternRatio also computes the ratio (number of assignments in common patterns of length > 1)/(number of assignments in specific patterns). [ Returns +inf if number of assignments in specific patterns is zero ]
--- INTERPRETATION: The more large the pattern ratio is, the more the two samples bear a strong resemblance in terms of node population AND of phylogenetic proximity between the nodes.

- "Percentage of assignments in a certain group of nodes depending on samples": 
* After selection of a group of bacterias and of a group of samples/metadatum, gives an array with the percentage of assignments to this family of bacterias depending on the samples/metadata.

- "Pearson correlation coefficient": 
* Computes the Pearson correlation coefficient r between a number of assignments to a group of bacterias and a group of metadatas or between the numbers of assignments to two groups of bacterias. [ Returns an error if this coefficient is not comprised between -1 and 1 ]
* Computing the Pearson correlation coefficient between two variables with only a few values does not really make sense.
--- INTERPRETATION: Be careful about the interpretation of this coefficient, as a coefficient close to 0 could mean no linear relationship. It is important to compare r with the graph associated to the same values to see if the correlation found does mean something [This option is available after computation of the Pearson coefficient]. As a general rule, you can assume the existence of a somehow linear correlation between two variables when |r| > 0.5. For x and y variables considered:
**** If r = â€“1. There is a perfect linear relationship between x and y: when x is increasing, y is decreasing, and the other way around.
**** If r = 0. There is no linear relationship between x and y.
**** If r = +1. There is a perfect linear relationship between x and y: when x is increasing, y is increasing, and the other way around.

- "Similarity coefficients between patients": 
* Measures the level of similarity between two patients (or two groups of patients) according to metadata: for N patients/groups, returns a NxN matrix M where M(i,j) is the similarity coefficient between patient i/group i and patient j/group j. Formula for such a coefficient is M(i,j) = M(j,i) = sum{for ni value in line i in the metadata matrix where nj != unknown and ni != unknown} |ni - nj| (distance).

- "Print the taxonomic tree":
* Prints the whole taxonomic tree with this syntax:
The program gives the choice of printing also for every node its sampleHitList, that is, the number of assignments n to this node for every sample where n is positive (non-zero).

__________________________________________________________________________
ROOT
[ (name,rank,identifier) ]
{ SAMPLEHITLIST
[ sampleHitList of this node ] }
CHILDREN
** child #[number of child] of [ name rank ]
[ printing recursively the subtree rooted at this child ]
---
END #[number of child] [ (child name) (child rank) ] of [ name rank ] ****
--
End
___________________________________________________________________________


- "Plot a graph, or a histogram, or a pie":
* Given a few sets of values, construct a figure. 
*** GRAPH: You can only construct the function giving the number of assignments to a certain group of bacterias depending on the number of assignments to another group of bacterias (in all samples), or the number of assignments to a certain group of bacterias depending on the value of a certain metadatum.
*** HISTOGRAM: (TODO)
*** PIE: You can only construct the percentage of assignment to a certain group of bacterias depending on metadata

- "Compute total distance between two samples":
* Compute a normalized similarity coefficient between two samples, using previous calculi. [/!\ It may take some time!]
* Also, provided a list of disjoint groups of samples, gives a list of pairs of sample group that are the most different

-----------------------------------------------------------------------------------------------------------------


Details about the files:
**** actions.py ****

**** computeDiscriminatoryDistance.py ****
Compares groups of samples using the different criteria.

**** exceptions.py ****
Contains the user-defined exceptions.

**** main.py ****
Interface with the user.

**** /meta ****
Contains raw material.

**** misc.py ****
Contains useful macros.

**** normalization.py ****
Normalizes values from a list of values.

**** parsingInfo.py ****
Parses data table stored at /meta.

**** parsingMatrix.py ****
Parses occurrence matrix stored at /meta.

**** parsingTree.py ****
Parses taxonomic tree stored at /meta.

**** patternTree.py ****
Computes patternRatio.

**** pearsonCorrelation.py ****
Computes Pearson coefficient.

**** percentage.py ****
Computes array of percentage.

**** plottingValues.py ****
Draws the graph of a set of values yArray depending on set of values xArray.

**** similarityCoefficient.py ****
Computes the similarity coefficient.

**** taxoTree.py ****
Implements the current version of TaxoTree.

**** totalratio.py ****
Computes totalRatio.

**** writeOnFiles ****
Helps saving results in files.

**** /files
Stores written files using writeOnFiles functions.

-----------------------------------------------------------------------------------------------------------------

Comments:

*** Before starting TAXOTREE ***
- Create a folder entitled "files" to store your results.

*** Note on TANGO results ***
- Please be aware the choice of parameter q in TANGO is of paramount importance in the assignments to nodes, and can greatly influence the results of the different comparison functions here. Choosing the same q from assignments of every sample must be considered therefore mandatory.

*** Prior to the parsing operations, numbers have been normalized this way: ***
- Variables that will not likely be useful (e.g. number of assignments too small) are identified and removed
- Assignment numbers have been normalized relatively to the total number of reads assigned in the taxonomic tree
- Then numbers have been centered and reduced
- In case numbers were not normalized before, please use the functions in normalization.py

*** Selection of samples ***
- In most of the possible actions, you can either choose one by one the samples involved in the action or give a list of metadatum with lower (e1) and upper (e2) bounds for each of them. In this case, every sample considered must have a required value n for a certain metadatum comprised between e1 and e2, where e1 and e2 are asked to the user. [For strings, use e1 = e2; for open intervals, use e1 = -inf or e2 = +inf]

*** Selection of values (in Pearson coefficient computing function) ***
- After being asked whether you want to compute sample Pearson or population Pearson coefficient, you can choose the nature of the two variables x and y = f(x) that you want to compare. You can compute two cases: y being the number of assignments to a chosen group of bacterias in a given sample S depending on x, number of assignments to another chosen group of bacterias in S; or y being the number of assignments to a chosen group of bacterias depending on x, value of one metadatum (unknown value are ignored). You can choose to display the graph of these two values, and the straight line which slope is the Pearson correlation coefficient.

*** Plotting ***
- If you do not succeed in creating a graph, because Python cannot import matplotlib.pyplot, then (if you are on Linux and own Python 3) write down in a terminal "sudo apt-get install python-matplotlib", and follow the instructions. Now it should work. If you cannot install, try download and install the latest updates of your programs ("sudo apt update" and then "sudo apt upgrade").

*** New distance ***
- The matrix with the new similarity coefficients for the samples in Info.csv has already been computed in matrix.taxotree. Please import it when function 8 is selected. (Because re-computing it is really long)

*** Testing the construction of taxonomic tree on other trees than GreenGenes's ***
- Be careful that the algorithm of construction of a taxonomic tree only works on complete phylogenies, that is having elements for every rank R,K,P, ..., S, which is the case of GreenGenes's tree. If you want to run the program on smaller phylogenies, you need to modify the default ranks array [S,...,P,K,R] in argument in taxoTree.py file to the current ranks array (ordered from the greatest rank to the smaller). If you want to use NCBI's tree, since the ranks are different, you will also need to update the default ranks array such as it fits the taxonomic ranks of NCBI (and the comparison function compare in misc.py).
